{"ast":null,"code":"var _jsxFileName = \"/Users/sehermahmud/npm-global/udemy/d-Material-UI-React/projectManager/src/ui/EnhancedTable.js\";\nvar __jsx = React.createElement;\n// import React, { useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n// import clsx from \"clsx\";\n// import { lighten, makeStyles } from \"@material-ui/core/styles\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableContainer from \"@material-ui/core/TableContainer\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TablePagination from \"@material-ui/core/TablePagination\";\n// import TableRow from \"@material-ui/core/TableRow\";\n// import TableSortLabel from \"@material-ui/core/TableSortLabel\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import Typography from \"@material-ui/core/Typography\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Checkbox from \"@material-ui/core/Checkbox\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import Tooltip from \"@material-ui/core/Tooltip\";\n// import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// import Switch from \"@material-ui/core/Switch\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import FilterListIcon from \"@material-ui/icons/FilterList\";\n// import Snackbar from \"@material-ui/core/Snackbar\";\n// import Button from \"@material-ui/core/Button\";\n// import Menu from \"@material-ui/core/Menu\";\n// import MenuItem from \"@material-ui/core/MenuItem\";\n// import TextField from \"@material-ui/core/TextField\";\n// import InputAdornment from \"@material-ui/core/InputAdornment\";\n// import Chip from \"@material-ui/core/Chip\";\n// import Grid from \"@material-ui/core/Grid\";\n// import axios from \"axios\";\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => desc(a, b, orderBy)\n//     : (a, b) => -desc(a, b, orderBy);\n// }\n// const headCells = [\n//   { id: \"name\", label: \"Name\" },\n//   { id: \"date\", label: \"Date\" },\n//   { id: \"service\", label: \"Service\" },\n//   { id: \"features\", label: \"Features\" },\n//   { id: \"complexity\", label: \"Complexity\" },\n//   { id: \"platforms\", label: \"Platforms\" },\n//   { id: \"users\", label: \"Users\" },\n//   { id: \"total\", label: \"Total\" },\n// ];\n// function EnhancedTableHead(props) {\n//   const {\n//     classes,\n//     onSelectAllClick,\n//     order,\n//     orderBy,\n//     numSelected,\n//     rowCount,\n//     onRequestSort,\n//   } = props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ \"aria-label\": \"select all desserts\" }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align=\"center\"\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               hideSortIcon\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const useToolbarStyles = makeStyles((theme) => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === \"light\"\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   title: {\n//     flex: \"1 1 100%\",\n//   },\n//   menu: {\n//     \"&:hover\": {\n//       backgroundColor: \"#fff\",\n//     },\n//     \"&.Mui-focusVisible\": {\n//       backgroundColor: \"#fff\",\n//     },\n//   },\n//   totalFilter: {\n//     fontSize: \"2rem\",\n//     color: theme.palette.common.orange,\n//   },\n//   dollarSign: {\n//     fontSize: \"1.5rem\",\n//     color: theme.palette.common.orange,\n//   },\n// }));\n// const EnhancedTableToolbar = (props) => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n//   const [undo, setUndo] = React.useState([]);\n//   const [anchorEl, setAnchorEl] = React.useState(null);\n//   const [openMenu, setOpenMenu] = React.useState(false);\n//   const [alert, setAlert] = React.useState({\n//     open: false,\n//     color: \"#FF3232\",\n//     message: \"Row deleted!\",\n//   });\n//   const handleClick = (e) => {\n//     setAnchorEl(e.currentTarget);\n//     setOpenMenu(true);\n//   };\n//   const handleClose = (e) => {\n//     setAnchorEl(null);\n//     setOpenMenu(false);\n//   };\n//   const onDelete = () => {\n//     const newRows = [...props.rows];\n//     const selectedRows = newRows.filter((row) =>\n//       props.selected.includes(row.name)\n//     );\n//     selectedRows.map((row) => (row.search = false));\n//     props.setRows(newRows);\n//     setUndo(selectedRows);\n//     props.setSelected([]);\n//     setAlert({ ...alert, open: true });\n//   };\n//   const onUndo = () => {\n//     setAlert({ ...alert, open: false });\n//     const newRows = [...props.rows];\n//     const redo = [...undo];\n//     redo.map((row) => (row.search = true));\n//     Array.prototype.push.apply(newRows, ...redo);\n//     props.setRows(newRows);\n//   };\n//   const handleTotalFilter = (event) => {\n//     props.setFilterPrice(event.target.value);\n//     if (event.target.value !== \"\") {\n//       const newRows = [...props.rows];\n//       newRows.map((row) =>\n//         eval(\n//           `${event.target.value} ${\n//             props.totalFilter === \"=\" ? \"===\" : props.totalFilter\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? (row.search = true)\n//           : (row.search = false)\n//       );\n//       props.setRows(newRows);\n//     } else {\n//       const newRows = [...props.rows];\n//       newRows.map((row) => (row.search = true));\n//       props.setRows(newRows);\n//     }\n//   };\n//   const filterChange = (operator) => {\n//     if (props.filterPrice !== \"\") {\n//       const newRows = [...props.rows];\n//       newRows.map((row) =>\n//         eval(\n//           `${props.filterPrice} ${\n//             operator === \"=\" ? \"===\" : operator\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? (row.search = true)\n//           : (row.search = false)\n//       );\n//       props.setRows(newRows);\n//     }\n//   };\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           className={classes.title}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           className={classes.title}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//         >\n//           {null}\n//         </Typography>\n//       )}\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton aria-label=\"delete\" onClick={onDelete}>\n//             <DeleteIcon style={{ fontSize: 30 }} color=\"primary\" />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton aria-label=\"filter list\" onClick={handleClick}>\n//             <FilterListIcon style={{ fontSize: 50 }} color=\"secondary\" />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//       <Snackbar\n//         open={alert.open}\n//         ContentProps={{\n//           style: {\n//             backgroundColor: alert.color,\n//           },\n//         }}\n//         anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n//         message={alert.message}\n//         onClose={(event, reason) => {\n//           if (reason === \"clickaway\") {\n//             setAlert({ ...alert, open: false });\n//             const newRows = [...props.rows];\n//             const names = [...undo.map((row) => row.name)];\n//             props.setRows(newRows.filter((row) => !names.includes(row.name)));\n//           }\n//         }}\n//         action={\n//           <Button onClick={onUndo} style={{ color: \"#fff\" }}>\n//             Undo\n//           </Button>\n//         }\n//       />\n//       <Menu\n//         id=\"simple-menu\"\n//         anchorEl={anchorEl}\n//         open={openMenu}\n//         onClose={handleClose}\n//         elevation={0}\n//         style={{ zIndex: 1302 }}\n//         keepMounted\n//       >\n//         <MenuItem classes={{ root: classes.menu }}>\n//           <TextField\n//             value={props.filterPrice}\n//             onChange={handleTotalFilter}\n//             placeholder=\"Enter a price to filter\"\n//             InputProps={{\n//               type: \"number\",\n//               startAdornment: (\n//                 <InputAdornment position=\"start\">\n//                   <span className={classes.dollarSign}>$</span>\n//                 </InputAdornment>\n//               ),\n//               endAdornment: (\n//                 <InputAdornment\n//                   onClick={() => {\n//                     props.setTotalFilter(\n//                       props.totalFilter === \">\"\n//                         ? \"<\"\n//                         : props.totalFilter === \"<\"\n//                         ? \"=\"\n//                         : \">\"\n//                     );\n//                     filterChange(\n//                       props.totalFilter === \">\"\n//                         ? \"<\"\n//                         : props.totalFilter === \"<\"\n//                         ? \"=\"\n//                         : \">\"\n//                     );\n//                   }}\n//                   position=\"end\"\n//                   style={{ cursor: \"pointer\" }}\n//                 >\n//                   <span className={classes.totalFilter}>\n//                     {props.totalFilter}\n//                   </span>\n//                 </InputAdornment>\n//               ),\n//             }}\n//           />\n//         </MenuItem>\n//       </Menu>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     width: \"100%\",\n//   },\n//   paper: {\n//     width: \"100%\",\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: \"rect(0 0 0 0)\",\n//     height: 1,\n//     margin: -1,\n//     overflow: \"hidden\",\n//     padding: 0,\n//     position: \"absolute\",\n//     top: 20,\n//     width: 1,\n//   },\n//   chip: {\n//     marginRight: \"2em\",\n//     backgroundColor: theme.palette.common.blue,\n//     color: \"#fff\",\n//   },\n// }));\n// export default function EnhancedTable(props) {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"name\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [filterPrice, setFilterPrice] = React.useState(\"\");\n//   const [totalFilter, setTotalFilter] = React.useState(\">\");\n//   // const [projects, setProjects] = React.useState([]);\n//   const [data, setData] = React.useState([]);\n//   useEffect(() => {\n//     axios.get(\"http://localhost:5000/api/places/\").then((json) => setData(json.data));\n//   }, []);\n//   const renderTable = (props) => {\n//     {stableSort(\n//       priceFilters(switchFilters()).filter((row) => row.search),\n//       getSorting(order, orderBy)\n//     )\n//       .slice(\n//         props.page * rowsPerPage,\n//         props.page * rowsPerPage + rowsPerPage\n//       )\n//       return data.map((project, row, index) => {\n//         const isItemSelected = isSelected(row.name);\n//         const labelId = `enhanced-table-checkbox-${index}`;\n//         return (\n//           <TableRow\n//             hover\n//             onClick={(event) => handleClick(event, row.name)}\n//             role=\"checkbox\"\n//             aria-checked={isItemSelected}\n//             tabIndex={-1}\n//             key={row.name}\n//             selected={isItemSelected}\n//           >\n//             <TableCell padding=\"checkbox\">\n//               <Checkbox\n//                 checked={isItemSelected}\n//                 inputProps={{ \"aria-labelledby\": labelId }}\n//               />\n//             </TableCell>\n//             <TableCell\n//               align=\"center\"\n//               component=\"th\"\n//               id={labelId}\n//               scope=\"row\"\n//               padding=\"none\"\n//             >\n//               {props.row.project.name}\n//             </TableCell>\n//             <TableCell align=\"center\">{props.row.project.date}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.service}</TableCell>\n//             <TableCell align=\"center\" style={{ width: \"5em\" }}>\n//               {props.row.project.features}\n//             </TableCell>\n//             <TableCell align=\"center\">{props.row.project.complexity}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.platforms}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.users}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.total}</TableCell>\n//           </TableRow>\n//         );\n//       })\n//     }\n//   };\n//   // axios\n//   //   .get(\"http://localhost:5000/api/places/\")\n//   //   .then((response) => {\n//   //     ({ projects: response.data });\n//   //   })\n//   //   .catch((error) => {\n//   //     console.log(error);\n//   //   });\n//   const handleRequestSort = (event, property) => {\n//     const isDesc = orderBy === property && order === \"desc\";\n//     setOrder(isDesc ? \"asc\" : \"desc\");\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelecteds = props.rows.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     props.setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     props.setPage(0);\n//   };\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n//   const switchFilters = () => {\n//     const {\n//       websiteChecked,\n//       iOSChecked,\n//       androidChecked,\n//       softwareChecked,\n//     } = props;\n//     const websites = props.rows.filter((row) =>\n//       websiteChecked ? row.service === \"Website\" : null\n//     );\n//     const iOSApps = props.rows.filter((row) =>\n//       iOSChecked ? row.platforms.includes(\"iOS\") : null\n//     );\n//     const androidApps = props.rows.filter((row) =>\n//       androidChecked ? row.platforms.includes(\"Android\") : null\n//     );\n//     const softwareApps = props.rows.filter((row) =>\n//       softwareChecked ? row.service === \"Custom Software\" : null\n//     );\n//     if (!websiteChecked && !iOSChecked && !androidChecked && !softwareChecked) {\n//       return props.rows;\n//     } else {\n//       let newRows = websites.concat(\n//         iOSApps.filter((item) => websites.indexOf(item) < 0)\n//       );\n//       let newRows2 = newRows.concat(\n//         androidApps.filter((item) => newRows.indexOf(item) < 0)\n//       );\n//       let newRows3 = newRows2.concat(\n//         softwareApps.filter((item) => newRows2.indexOf(item) < 0)\n//       );\n//       return newRows3;\n//     }\n//   };\n//   const priceFilters = (switchRows) => {\n//     if (filterPrice !== \"\") {\n//       const newRows = [...switchRows];\n//       newRows.map((row) =>\n//         eval(\n//           `${filterPrice} ${\n//             totalFilter === \"=\" ? \"===\" : totalFilter\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? row.search === false\n//             ? null\n//             : (row.search = true)\n//           : (row.search = false)\n//       );\n//       return newRows;\n//     } else {\n//       return switchRows;\n//     }\n//   };\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper} elevation={0}>\n//         <EnhancedTableToolbar\n//           rows={props.rows}\n//           setRows={props.setRows}\n//           selected={selected}\n//           setSelected={setSelected}\n//           numSelected={selected.length}\n//           filterPrice={filterPrice}\n//           setFilterPrice={setFilterPrice}\n//           totalFilter={totalFilter}\n//           setTotalFilter={setTotalFilter}\n//         />\n//         <TableContainer>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size=\"medium\"\n//             aria-label=\"enhanced table\"\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={props.rows.length}\n//             />\n//             <TableBody>\n//               {renderTable()}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={\n//             priceFilters(switchFilters()).filter((row) => row.search).length\n//           }\n//           rowsPerPage={rowsPerPage}\n//           page={props.page}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//         <Grid container justify=\"flex-end\">\n//           <Grid item>\n//             {filterPrice !== \"\" ? (\n//               <Chip\n//                 onDelete={() => {\n//                   setFilterPrice(\"\");\n//                   const newRows = [...props.rows];\n//                   newRows.map((row) => (row.search = true));\n//                   props.setRows(newRows);\n//                 }}\n//                 className={classes.chip}\n//                 label={\n//                   totalFilter === \">\"\n//                     ? `Less than $${filterPrice}`\n//                     : totalFilter === \"<\"\n//                     ? `Greater than $${filterPrice}`\n//                     : `Equal to $${filterPrice}`\n//                 }\n//               />\n//             ) : null}\n//           </Grid>\n//         </Grid>\n//       </Paper>\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from \"react\";\nexport default function EnhancedTable(props) {\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  useEffect(() => {\n    axios.get(url).then(json => setData(json.data));\n  }, []);\n\n  const renderTable = () => {\n    return data.map(user => {\n      return __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 9\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }\n      }, user.name), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }\n      }, user.email), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }\n      }, user.address.street), \" //only street name shown, if you need to show complete address then you need to iterate over `user.address` object\", __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }\n      }, user.company.name), \" //only company name shown, if you need to show complete company name then you need to iterate over `user.name` object\");\n    });\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    id: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 7\n    }\n  }, \"API Table\"), __jsx(\"table\", {\n    id: \"users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }\n  }, \" //Your Table in post changed to table to make it work\", __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 11\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 13\n    }\n  }, \"Name\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }\n  }, \"Email\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 13\n    }\n  }, \"Address\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 13\n    }\n  }, \"Company\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 9\n    }\n  }, renderTable())));\n}","map":{"version":3,"sources":["/Users/sehermahmud/npm-global/udemy/d-Material-UI-React/projectManager/src/ui/EnhancedTable.js"],"names":["React","useState","useEffect","EnhancedTable","props","url","data","setData","axios","get","then","json","renderTable","map","user","name","email","address","street","company"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,QAAMC,GAAG,GAAG,4CAAZ;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAACC,GAAN,CAAUJ,GAAV,EAAeK,IAAf,CAAoBC,IAAI,IAAIJ,OAAO,CAACI,IAAI,CAACL,IAAN,CAAnC;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMM,WAAW,GAAG,MAAM;AACxB,WAAON,IAAI,CAACO,GAAL,CAASC,IAAI,IAAI;AACtB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,IAAI,CAACC,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,IAAI,CAACE,KAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,IAAI,CAACG,OAAL,CAAaC,MAAlB,CAHF,yHAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,IAAI,CAACK,OAAL,CAAaJ,IAAlB,CAJF,2HADF;AAQD,KATM,CAAP;AAUD,GAXD;;AAaA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAO,IAAA,EAAE,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQH,WAAW,EAAnB,CATF,CAFF,CADF;AAgBD","sourcesContent":["// import React, { useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n// import clsx from \"clsx\";\n// import { lighten, makeStyles } from \"@material-ui/core/styles\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableContainer from \"@material-ui/core/TableContainer\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TablePagination from \"@material-ui/core/TablePagination\";\n// import TableRow from \"@material-ui/core/TableRow\";\n// import TableSortLabel from \"@material-ui/core/TableSortLabel\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import Typography from \"@material-ui/core/Typography\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Checkbox from \"@material-ui/core/Checkbox\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import Tooltip from \"@material-ui/core/Tooltip\";\n// import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// import Switch from \"@material-ui/core/Switch\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import FilterListIcon from \"@material-ui/icons/FilterList\";\n// import Snackbar from \"@material-ui/core/Snackbar\";\n// import Button from \"@material-ui/core/Button\";\n// import Menu from \"@material-ui/core/Menu\";\n// import MenuItem from \"@material-ui/core/MenuItem\";\n// import TextField from \"@material-ui/core/TextField\";\n// import InputAdornment from \"@material-ui/core/InputAdornment\";\n// import Chip from \"@material-ui/core/Chip\";\n// import Grid from \"@material-ui/core/Grid\";\n// import axios from \"axios\";\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === \"desc\"\n//     ? (a, b) => desc(a, b, orderBy)\n//     : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const headCells = [\n//   { id: \"name\", label: \"Name\" },\n//   { id: \"date\", label: \"Date\" },\n//   { id: \"service\", label: \"Service\" },\n//   { id: \"features\", label: \"Features\" },\n//   { id: \"complexity\", label: \"Complexity\" },\n//   { id: \"platforms\", label: \"Platforms\" },\n//   { id: \"users\", label: \"Users\" },\n//   { id: \"total\", label: \"Total\" },\n// ];\n\n// function EnhancedTableHead(props) {\n//   const {\n//     classes,\n//     onSelectAllClick,\n//     order,\n//     orderBy,\n//     numSelected,\n//     rowCount,\n//     onRequestSort,\n//   } = props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ \"aria-label\": \"select all desserts\" }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align=\"center\"\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               hideSortIcon\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const useToolbarStyles = makeStyles((theme) => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === \"light\"\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   title: {\n//     flex: \"1 1 100%\",\n//   },\n//   menu: {\n//     \"&:hover\": {\n//       backgroundColor: \"#fff\",\n//     },\n//     \"&.Mui-focusVisible\": {\n//       backgroundColor: \"#fff\",\n//     },\n//   },\n//   totalFilter: {\n//     fontSize: \"2rem\",\n//     color: theme.palette.common.orange,\n//   },\n//   dollarSign: {\n//     fontSize: \"1.5rem\",\n//     color: theme.palette.common.orange,\n//   },\n// }));\n\n// const EnhancedTableToolbar = (props) => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n//   const [undo, setUndo] = React.useState([]);\n//   const [anchorEl, setAnchorEl] = React.useState(null);\n//   const [openMenu, setOpenMenu] = React.useState(false);\n\n//   const [alert, setAlert] = React.useState({\n//     open: false,\n//     color: \"#FF3232\",\n//     message: \"Row deleted!\",\n//   });\n\n//   const handleClick = (e) => {\n//     setAnchorEl(e.currentTarget);\n//     setOpenMenu(true);\n//   };\n\n//   const handleClose = (e) => {\n//     setAnchorEl(null);\n//     setOpenMenu(false);\n//   };\n\n//   const onDelete = () => {\n//     const newRows = [...props.rows];\n//     const selectedRows = newRows.filter((row) =>\n//       props.selected.includes(row.name)\n//     );\n//     selectedRows.map((row) => (row.search = false));\n//     props.setRows(newRows);\n\n//     setUndo(selectedRows);\n//     props.setSelected([]);\n//     setAlert({ ...alert, open: true });\n//   };\n\n//   const onUndo = () => {\n//     setAlert({ ...alert, open: false });\n//     const newRows = [...props.rows];\n//     const redo = [...undo];\n//     redo.map((row) => (row.search = true));\n//     Array.prototype.push.apply(newRows, ...redo);\n//     props.setRows(newRows);\n//   };\n\n//   const handleTotalFilter = (event) => {\n//     props.setFilterPrice(event.target.value);\n\n//     if (event.target.value !== \"\") {\n//       const newRows = [...props.rows];\n//       newRows.map((row) =>\n//         eval(\n//           `${event.target.value} ${\n//             props.totalFilter === \"=\" ? \"===\" : props.totalFilter\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? (row.search = true)\n//           : (row.search = false)\n//       );\n//       props.setRows(newRows);\n//     } else {\n//       const newRows = [...props.rows];\n//       newRows.map((row) => (row.search = true));\n//       props.setRows(newRows);\n//     }\n//   };\n\n//   const filterChange = (operator) => {\n//     if (props.filterPrice !== \"\") {\n//       const newRows = [...props.rows];\n//       newRows.map((row) =>\n//         eval(\n//           `${props.filterPrice} ${\n//             operator === \"=\" ? \"===\" : operator\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? (row.search = true)\n//           : (row.search = false)\n//       );\n//       props.setRows(newRows);\n//     }\n//   };\n\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           className={classes.title}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           className={classes.title}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//         >\n//           {null}\n//         </Typography>\n//       )}\n\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton aria-label=\"delete\" onClick={onDelete}>\n//             <DeleteIcon style={{ fontSize: 30 }} color=\"primary\" />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton aria-label=\"filter list\" onClick={handleClick}>\n//             <FilterListIcon style={{ fontSize: 50 }} color=\"secondary\" />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//       <Snackbar\n//         open={alert.open}\n//         ContentProps={{\n//           style: {\n//             backgroundColor: alert.color,\n//           },\n//         }}\n//         anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n//         message={alert.message}\n//         onClose={(event, reason) => {\n//           if (reason === \"clickaway\") {\n//             setAlert({ ...alert, open: false });\n//             const newRows = [...props.rows];\n//             const names = [...undo.map((row) => row.name)];\n//             props.setRows(newRows.filter((row) => !names.includes(row.name)));\n//           }\n//         }}\n//         action={\n//           <Button onClick={onUndo} style={{ color: \"#fff\" }}>\n//             Undo\n//           </Button>\n//         }\n//       />\n//       <Menu\n//         id=\"simple-menu\"\n//         anchorEl={anchorEl}\n//         open={openMenu}\n//         onClose={handleClose}\n//         elevation={0}\n//         style={{ zIndex: 1302 }}\n//         keepMounted\n//       >\n//         <MenuItem classes={{ root: classes.menu }}>\n//           <TextField\n//             value={props.filterPrice}\n//             onChange={handleTotalFilter}\n//             placeholder=\"Enter a price to filter\"\n//             InputProps={{\n//               type: \"number\",\n//               startAdornment: (\n//                 <InputAdornment position=\"start\">\n//                   <span className={classes.dollarSign}>$</span>\n//                 </InputAdornment>\n//               ),\n//               endAdornment: (\n//                 <InputAdornment\n//                   onClick={() => {\n//                     props.setTotalFilter(\n//                       props.totalFilter === \">\"\n//                         ? \"<\"\n//                         : props.totalFilter === \"<\"\n//                         ? \"=\"\n//                         : \">\"\n//                     );\n//                     filterChange(\n//                       props.totalFilter === \">\"\n//                         ? \"<\"\n//                         : props.totalFilter === \"<\"\n//                         ? \"=\"\n//                         : \">\"\n//                     );\n//                   }}\n//                   position=\"end\"\n//                   style={{ cursor: \"pointer\" }}\n//                 >\n//                   <span className={classes.totalFilter}>\n//                     {props.totalFilter}\n//                   </span>\n//                 </InputAdornment>\n//               ),\n//             }}\n//           />\n//         </MenuItem>\n//       </Menu>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     width: \"100%\",\n//   },\n//   paper: {\n//     width: \"100%\",\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: \"rect(0 0 0 0)\",\n//     height: 1,\n//     margin: -1,\n//     overflow: \"hidden\",\n//     padding: 0,\n//     position: \"absolute\",\n//     top: 20,\n//     width: 1,\n//   },\n//   chip: {\n//     marginRight: \"2em\",\n//     backgroundColor: theme.palette.common.blue,\n//     color: \"#fff\",\n//   },\n// }));\n\n// export default function EnhancedTable(props) {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"name\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [filterPrice, setFilterPrice] = React.useState(\"\");\n//   const [totalFilter, setTotalFilter] = React.useState(\">\");\n//   // const [projects, setProjects] = React.useState([]);\n\n//   const [data, setData] = React.useState([]);\n\n//   useEffect(() => {\n//     axios.get(\"http://localhost:5000/api/places/\").then((json) => setData(json.data));\n//   }, []);\n\n//   const renderTable = (props) => {\n//     {stableSort(\n//       priceFilters(switchFilters()).filter((row) => row.search),\n//       getSorting(order, orderBy)\n//     )\n//       .slice(\n//         props.page * rowsPerPage,\n//         props.page * rowsPerPage + rowsPerPage\n//       )\n//       return data.map((project, row, index) => {\n//         const isItemSelected = isSelected(row.name);\n//         const labelId = `enhanced-table-checkbox-${index}`;\n\n//         return (\n//           <TableRow\n//             hover\n//             onClick={(event) => handleClick(event, row.name)}\n//             role=\"checkbox\"\n//             aria-checked={isItemSelected}\n//             tabIndex={-1}\n//             key={row.name}\n//             selected={isItemSelected}\n//           >\n//             <TableCell padding=\"checkbox\">\n//               <Checkbox\n//                 checked={isItemSelected}\n//                 inputProps={{ \"aria-labelledby\": labelId }}\n//               />\n//             </TableCell>\n//             <TableCell\n//               align=\"center\"\n//               component=\"th\"\n//               id={labelId}\n//               scope=\"row\"\n//               padding=\"none\"\n//             >\n//               {props.row.project.name}\n//             </TableCell>\n//             <TableCell align=\"center\">{props.row.project.date}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.service}</TableCell>\n//             <TableCell align=\"center\" style={{ width: \"5em\" }}>\n//               {props.row.project.features}\n//             </TableCell>\n//             <TableCell align=\"center\">{props.row.project.complexity}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.platforms}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.users}</TableCell>\n//             <TableCell align=\"center\">{props.row.project.total}</TableCell>\n//           </TableRow>\n//         );\n//       })\n//     }\n//   };\n\n//   // axios\n//   //   .get(\"http://localhost:5000/api/places/\")\n//   //   .then((response) => {\n//   //     ({ projects: response.data });\n//   //   })\n//   //   .catch((error) => {\n//   //     console.log(error);\n//   //   });\n\n//   const handleRequestSort = (event, property) => {\n//     const isDesc = orderBy === property && order === \"desc\";\n//     setOrder(isDesc ? \"asc\" : \"desc\");\n//     setOrderBy(property);\n//   };\n\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelecteds = props.rows.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event, newPage) => {\n//     props.setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     props.setPage(0);\n//   };\n\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n\n//   const switchFilters = () => {\n//     const {\n//       websiteChecked,\n//       iOSChecked,\n//       androidChecked,\n//       softwareChecked,\n//     } = props;\n\n//     const websites = props.rows.filter((row) =>\n//       websiteChecked ? row.service === \"Website\" : null\n//     );\n\n//     const iOSApps = props.rows.filter((row) =>\n//       iOSChecked ? row.platforms.includes(\"iOS\") : null\n//     );\n\n//     const androidApps = props.rows.filter((row) =>\n//       androidChecked ? row.platforms.includes(\"Android\") : null\n//     );\n\n//     const softwareApps = props.rows.filter((row) =>\n//       softwareChecked ? row.service === \"Custom Software\" : null\n//     );\n\n//     if (!websiteChecked && !iOSChecked && !androidChecked && !softwareChecked) {\n//       return props.rows;\n//     } else {\n//       let newRows = websites.concat(\n//         iOSApps.filter((item) => websites.indexOf(item) < 0)\n//       );\n\n//       let newRows2 = newRows.concat(\n//         androidApps.filter((item) => newRows.indexOf(item) < 0)\n//       );\n\n//       let newRows3 = newRows2.concat(\n//         softwareApps.filter((item) => newRows2.indexOf(item) < 0)\n//       );\n\n//       return newRows3;\n//     }\n//   };\n\n//   const priceFilters = (switchRows) => {\n//     if (filterPrice !== \"\") {\n//       const newRows = [...switchRows];\n//       newRows.map((row) =>\n//         eval(\n//           `${filterPrice} ${\n//             totalFilter === \"=\" ? \"===\" : totalFilter\n//           } ${row.total.slice(1, row.total.length)}`\n//         )\n//           ? row.search === false\n//             ? null\n//             : (row.search = true)\n//           : (row.search = false)\n//       );\n//       return newRows;\n//     } else {\n//       return switchRows;\n//     }\n//   };\n\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper} elevation={0}>\n//         <EnhancedTableToolbar\n//           rows={props.rows}\n//           setRows={props.setRows}\n//           selected={selected}\n//           setSelected={setSelected}\n//           numSelected={selected.length}\n//           filterPrice={filterPrice}\n//           setFilterPrice={setFilterPrice}\n//           totalFilter={totalFilter}\n//           setTotalFilter={setTotalFilter}\n//         />\n//         <TableContainer>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size=\"medium\"\n//             aria-label=\"enhanced table\"\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={props.rows.length}\n//             />\n//             <TableBody>\n//               {renderTable()}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={\n//             priceFilters(switchFilters()).filter((row) => row.search).length\n//           }\n//           rowsPerPage={rowsPerPage}\n//           page={props.page}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//         <Grid container justify=\"flex-end\">\n//           <Grid item>\n//             {filterPrice !== \"\" ? (\n//               <Chip\n//                 onDelete={() => {\n//                   setFilterPrice(\"\");\n//                   const newRows = [...props.rows];\n//                   newRows.map((row) => (row.search = true));\n//                   props.setRows(newRows);\n//                 }}\n//                 className={classes.chip}\n//                 label={\n//                   totalFilter === \">\"\n//                     ? `Less than $${filterPrice}`\n//                     : totalFilter === \"<\"\n//                     ? `Greater than $${filterPrice}`\n//                     : `Equal to $${filterPrice}`\n//                 }\n//               />\n//             ) : null}\n//           </Grid>\n//         </Grid>\n//       </Paper>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from \"react\"\n\n\nexport default function EnhancedTable(props) {\n  const url = 'https://jsonplaceholder.typicode.com/users'\n\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    axios.get(url).then(json => setData(json.data))\n  }, [])\n\n  const renderTable = () => {\n    return data.map(user => {\n      return (\n        <tr>\n          <td>{user.name}</td>\n          <td>{user.email}</td>\n          <td>{user.address.street}</td> //only street name shown, if you need to show complete address then you need to iterate over `user.address` object\n          <td>{user.company.name}</td> //only company name shown, if you need to show complete company name then you need to iterate over `user.name` object\n        </tr>\n      )\n    })\n  }\n\n  return (\n    <div>\n      <h1 id=\"title\">API Table</h1>\n      <table id=\"users\"> //Your Table in post changed to table to make it work\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Address</th>\n            <th>Company</th>\n          </tr>\n        </thead>\n        <tbody>{renderTable()}</tbody>\n      </table>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}